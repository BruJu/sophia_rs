main = ${ (iri | irelative_ref) ~ EOI }

// NOT USED by this crate
//iri_reference = ${ iri | irelative_ref }

iri = ${ scheme ~ ":" ~ ihier_part ~ ("?" ~ iquery)? ~ ("#" ~ ifragment)? }

ihier_part = ${ "//" ~ iauthority ~ ipath_abempty
              | ipath_absolute
              | ipath_rootless
              | ipath_empty
}

// NOT USED by this crate
//absolute_IRI = ${ scheme ~ ":" ~ ihier_part ~ ("?" ~ iquery)? }

irelative_ref = ${ irelative_part ~ ("?" ~ iquery )? ~ ("#" ~ ifragment)? }

irelative_part = ${ "//" ~ iauthority ~ ipath_abempty
                  | ipath_absolute
                  | ipath_noscheme
                  | ipath_empty
}

iauthority = ${ (iuserinfo ~ "@")? ~ ihost ~ (":" ~ port)? }

iuserinfo = ${ (iunreserved | pct_encoded | sub_delims | ":")* }

ihost = ${ ip_literal | ipv4address | ireg_name }

ireg_name = ${ (iunreserved | pct_encoded | sub_delims)* }

// NOT USED by this crate
//ipath = ${ ipath_abempty    // begins with "/" or is empty
//         | ipath_absolute   // begins with "/" but not "//"
//         | ipath_noscheme   // begins with a non-colon segment
//         | ipath_rootless   // begins with a segment
//         | ipath_empty      // zero characters
//}

ipath_abempty = ${ ("/" ~ isegment )* }

ipath_absolute = ${ "/" ~ (isegment_nz ~ ("/" ~ isegment )*)? }

ipath_noscheme = ${ isegment_nz_nc ~ ( "/" ~ isegment )* }

ipath_rootless = ${ isegment_nz ~ ("/" ~ isegment )* }

ipath_empty = ${ !ipchar }

isegment = @{ ipchar* }

isegment_nz = @{ ipchar+ }

isegment_nz_nc = @{ (iunreserved | pct_encoded | sub_delims | "@")+ }
                 // non-zero-length segment without any colon ":"

ipchar = @{ iunreserved | pct_encoded | sub_delims | ":" | "@" }

iquery = @{ (ipchar | iprivate | "/" | "?" )* }

ifragment= @{ (ipchar | "/" | "?")* }

iunreserved = @{ alpha | digit | "-" | "." | "_" | "~" | ucschar }

ucschar = @{ '\u{A0}'..'\u{D7FF}' | '\u{F900}'..'\u{FDCF}' | '\u{FDF0}'..'\u{FFEF}'
           | '\u{10000}'..'\u{1FFFD}' | '\u{20000}'..'\u{2FFFD}' | '\u{30000}'..'\u{3FFFD}'
           | '\u{40000}'..'\u{4FFFD}' | '\u{50000}'..'\u{5FFFD}' | '\u{60000}'..'\u{6FFFD}'
           | '\u{70000}'..'\u{7FFFD}' | '\u{80000}'..'\u{8FFFD}' | '\u{90000}'..'\u{9FFFD}'
           | '\u{A0000}'..'\u{AFFFD}' | '\u{B0000}'..'\u{BFFFD}' | '\u{C0000}'..'\u{CFFFD}'
           | '\u{D0000}'..'\u{DFFFD}' | '\u{E1000}'..'\u{EFFFD}'
}

iprivate= @{ '\u{E000}'..'\u{F8FF}' | '\u{F0000}'..'\u{FFFFD}' | '\u{100000}'..'\u{10FFFD}' }


//   The following rules are the same as those in [RFC3986]:

scheme = @{ alpha ~ ( alpha | digit | "+" | "-" | "." )* }

port = @{ digit* }

ip_literal = @{ "[" ~ (ipv6address | ipvfuture) ~ "]" }

ipvfuture = @{ "v" ~ hexdig+ ~ "." ~ ( unreserved | sub_delims | ":" )+ }

ipv6address = @{                                   (h16 ~ ":"){6} ~ ls32
               |                            "::" ~ (h16 ~ ":"){5} ~ ls32
               | (                  h16)? ~ "::" ~ (h16 ~ ":"){4} ~ ls32
               | ((h16 ~ ":"){,1} ~ h16)? ~ "::" ~ (h16 ~ ":"){3} ~ ls32
               | ((h16 ~ ":"){,2} ~ h16)? ~ "::" ~ (h16 ~ ":"){2} ~ ls32
               | ((h16 ~ ":"){,3} ~ h16)? ~ "::" ~  h16 ~ ":"     ~ ls32
               | ((h16 ~ ":"){,4} ~ h16)? ~ "::"                  ~ ls32
               | ((h16 ~ ":"){,5} ~ h16)? ~ "::"                  ~  h16
               | ((h16 ~ ":"){,6} ~ h16)? ~ "::"
}

h16 = @{ hexdig{1,4} }

ls32 = @{ (h16 ~ ":" ~ h16) | ipv4address }

ipv4address = @{ dec_octet ~ ("." ~ dec_octet){3} }

dec_octet = @{ digit                   // 0-9
             | '1'..'9' ~ digit        // 10-99
             | "1" ~ digit{2}          // 100-199
             | "2" ~ '0'..'4' ~ digit  // 200-249
             | "25" ~ '0'..'5'         // 250-255
}

pct_encoded = @{ "%" ~ hexdig{2} }

unreserved = @{ alpha | digit | "-" | "." | "_" | "~" }

// NOT USED in this crate
//reserved = @{ gen_delims | sub_delims }

// NOT USED in this crate
//gen_delims = @{ ":" | "|" | "?" | "#" | "[" | "]" | "@" }

sub_delims = @{ "!" | "$" | "&" | "'" | "(" | ")" | "*" | "+" | "," | ";" | "=" }


// from RFC2234

alpha = @{ 'A'..'Z' | 'a'..'z' }

digit = @{ '0'..'9' }

hexdig = @{ digit | 'A'..'F' }
