// [1] 	ntriplesDoc 	::= 	triple? (EOL triple)* EOL?
ntriples_doc = _{ triple? ~ ( eol ~ triple )* ~ eol? ~ eoi }

// [2] 	triple 	::= 	subject predicate object '.'
triple = { subject ~ predicate ~ object ~ "." }

// [3] 	subject 	::= 	IRIREF | blank_node_label
subject = _{ iriref | blank_node_label }

// [4] 	predicate 	::= 	IRIREF
predicate = _{ iriref }

// [5] 	object 	::= 	IRIREF | blank_node_label | literal
object = _{ iriref | blank_node_label | literal }

// [6] 	literal 	::= 	string_literal_quote ('^^' IRIREF | LANGTAG)?
literal = { string_literal_quote ~ ( "^^" ~ iriref | langtag )? }

// Productions for terminals
// [144s] 	LANGTAG 	::= 	'@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
langtag = @{
  "@" ~
  ( 'a'..'z' | 'A'..'Z' )+ ~
  ( "-" ~ ( 'a'..'z' | 'A'..'Z' | '0'..'9' )+ )*
}

// [7] 	EOL 	::= 	[#xD#xA]+
eol = _{ ( "\n" | "\r" )* }

// [8] 	IRIREF 	::= 	'<' ([^#x00-#x20<>"{}|^`\] | UCHAR)* '>'
iriref = ${
  "<" ~
  ( !( '\x00'..'\x20' | "<" | ">" | "\"" | "{" | "}" | "|" | "^" | "``" | "\\") ~ any | uchar )* ~
  ">"
}

// [9] 	string_literal_quote 	::= 	'"' ([^#x22#x5C#xA#xD] | echar | UCHAR)* '"'
string_literal_quote = ${
  "\"" ~
  ( !("\"" | "\\" | "\n" | "\r") ~ any | echar | uchar)* ~
  "\""
}

// [141s] 	blank_node_label 	::= 	'_:' (pn_chars_u | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
blank_node_label = @{
  "_:" ~ (pn_chars_u | '0'..'9') ~ (pn_chars | "." ~ pn_chars)*
}

// [10] 	UCHAR 	::= 	'\u' HEX HEX HEX HEX | '\U' HEX HEX HEX HEX HEX HEX HEX HEX
uchar = @{ "\\u" ~ hex{4}  |  "\\U" ~ hex{8} }

// [153s] 	ECHAR 	::= 	'\' [tbnrf"'\]
echar = @{ "\\" ~ ("t" | "b" | "n" | "r" | "f" | "\"" | "'" | "\\") }

// [157s] 	PN_CHARS_BASE 	::= 	[A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
pn_chars_base = @{ 'A'..'Z' | 'a'..'z' | '\u{00C0}'..'\u{00D6}' | '\u{00D8}'..'\u{00F6}' | '\u{00F8}'..'\u{02FF}' | '\u{0370}'..'\u{037D}' | '\u{037F}'..'\u{1FFF}' | '\u{200C}'..'\u{200D}' | '\u{2070}'..'\u{218F}' | '\u{2C00}'..'\u{2FEF}' | '\u{3001}'..'\u{D7FF}' | '\u{F900}'..'\u{FDCF}' | '\u{FDF0}'..'\u{FFFD}' | '\u{10000}'..'\u{EFFFF}' }

// WARNING !! IN Turtle and Sparql, the colon ':' is NOT AUTHORIZED IN THIS RULE
// [158s] 	PN_CHARS_U 	::= 	PN_CHARS_BASE | '_' | ':'
pn_chars_u = @{ pn_chars_base | "_" | ":" }

// [160s] 	PN_CHARS 	::= 	PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]
pn_chars = @{ pn_chars_u | "-" | '0'..'9' | "\u{00B7}" | '\u{0300}'..'\u{036F}' | '\u{203F}'..'\u{2040}' }

// [162s] 	HEX 	::= 	[0-9] | [A-F] | [a-f]
hex = @{ '0'..'9' | 'A'..'F' | 'a'..'f' }

whitespace = _{ " " | "\t" }

comment = _{ "#" ~ ( !("\n" | "\r") ~ any )* }


ntriple_line = _{ triple ~ eoi }

// generalized NTriples,
// allowing any term (including variables and relative IRIs) in any position.

generalized_line = _{ generalized_triple ~ eoi }

generalized_triple = { term ~ term ~ term ~ "." }

term = _{ object | variable }

variable = @{
  "?" ~
  ( pn_chars_base | "_" | '0'..'9') ~
  ( pn_chars_base | "_" | '0'..'9' |
    "\u{00B7}" | '\u{0300}'..'\u{036F}' | '\u{203F}'..'\u{2040}' )*
}

